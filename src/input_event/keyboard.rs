use super::element_state::ElementState;

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum KeyboardKey
{
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Space,
    Escape,
    Enter,
    Backspace,
    Comma,
    Period,
    Semicolon,
    Slash,
    Equal,
    LeftBracket,
    RightBracket,
    LeftShift,
    RightShift,
    LeftCtrl,
    RightCtrl,
    LeftAlt,
    RightAlt,
    LeftArrow,
    RightArrow,
    Numrow0,
    Numrow1,
    Numrow2,
    Numrow3,
    Numrow4,
    Numrow5,
    Numrow6,
    Numrow7,
    Numrow8,
    Numrow9,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadDecimal,
    NumpadDivide,
    NumpadMultiply,
    NumpadSubtract,
    NumpadAdd,
    NumpadEnter,
    NumpadEqual,
    Apostrophe,
    Minus,
    Backslash,
    AccentGrave,
    Delete,
    UpArrow,
    DownArrow,
    PageUp,
    PageDown,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
}

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ModifierState
{
    pub shift: bool,
    pub ctrl: bool,
    pub alt: bool,
}

impl ModifierState
{
    pub const EMPTY: ModifierState = ModifierState { shift: false, ctrl: false, alt: false };
    pub const SHIFT: ModifierState = ModifierState { shift: true, ctrl: false, alt: false };
    pub const CTRL: ModifierState = ModifierState { shift: false, ctrl: true, alt: false };
    pub const ALT: ModifierState = ModifierState { shift: false, ctrl: false, alt: true };
    
    pub fn empty(&self) -> bool
    {
        !self.shift && !self.ctrl && !self.alt
    }
}

#[derive(Debug, Clone)]
pub struct KeyboardInputState
{
    pub a: ElementState,
    pub b: ElementState,
    pub c: ElementState,
    pub d: ElementState,
    pub e: ElementState,
    pub f: ElementState,
    pub g: ElementState,
    pub h: ElementState,
    pub i: ElementState,
    pub j: ElementState,
    pub k: ElementState,
    pub l: ElementState,
    pub m: ElementState,
    pub n: ElementState,
    pub o: ElementState,
    pub p: ElementState,
    pub q: ElementState,
    pub r: ElementState,
    pub s: ElementState,
    pub t: ElementState,
    pub u: ElementState,
    pub v: ElementState,
    pub w: ElementState,
    pub x: ElementState,
    pub y: ElementState,
    pub z: ElementState,
    pub space: ElementState,
    pub escape: ElementState,
    pub enter: ElementState,
    pub backspace: ElementState,
    pub comma: ElementState,
    pub period: ElementState,
    pub semicolon: ElementState,
    pub slash: ElementState,
    pub equal: ElementState,
    pub left_bracket: ElementState,
    pub right_bracket: ElementState,
    pub left_shift: ElementState,
    pub right_shift: ElementState,
    pub left_ctrl: ElementState,
    pub right_ctrl: ElementState,
    pub left_alt: ElementState,
    pub right_alt: ElementState,
    pub left_arrow: ElementState,
    pub right_arrow: ElementState,
    pub numrow0: ElementState,
    pub numrow1: ElementState,
    pub numrow2: ElementState,
    pub numrow3: ElementState,
    pub numrow4: ElementState,
    pub numrow5: ElementState,
    pub numrow6: ElementState,
    pub numrow7: ElementState,
    pub numrow8: ElementState,
    pub numrow9: ElementState,
    pub numpad0: ElementState,
    pub numpad1: ElementState,
    pub numpad2: ElementState,
    pub numpad3: ElementState,
    pub numpad4: ElementState,
    pub numpad5: ElementState,
    pub numpad6: ElementState,
    pub numpad7: ElementState,
    pub numpad8: ElementState,
    pub numpad9: ElementState,
    pub numpad_decimal: ElementState,
    pub numpad_divide: ElementState,
    pub numpad_multiply: ElementState,
    pub numpad_subtract: ElementState,
    pub numpad_add: ElementState,
    pub numpad_enter: ElementState,
    pub numpad_equal: ElementState,
    pub apostrophe: ElementState,
    pub minus: ElementState,
    pub backslash: ElementState,
    pub accent_grave: ElementState,
    pub delete: ElementState,
    pub up_arrow: ElementState,
    pub down_arrow: ElementState,
    pub page_up: ElementState,
    pub page_down: ElementState,
    pub f1: ElementState,
    pub f2: ElementState,
    pub f3: ElementState,
    pub f4: ElementState,
    pub f5: ElementState,
    pub f6: ElementState,
    pub f7: ElementState,
    pub f8: ElementState,
    pub f9: ElementState,
    pub f10: ElementState,
    pub f11: ElementState,
    pub f12: ElementState,
    pub f13: ElementState,
    pub f14: ElementState,
    pub f15: ElementState,
    pub f16: ElementState,
    pub f17: ElementState,
    pub f18: ElementState,
    pub f19: ElementState,
    pub f20: ElementState,
    pub f21: ElementState,
    pub f22: ElementState,
    pub f23: ElementState,
    pub f24: ElementState,
}

impl KeyboardInputState
{
    pub fn new() -> KeyboardInputState
    {
        KeyboardInputState
        {
            a: ElementState::Released,
            b: ElementState::Released,
            c: ElementState::Released,
            d: ElementState::Released,
            e: ElementState::Released,
            f: ElementState::Released,
            g: ElementState::Released,
            h: ElementState::Released,
            i: ElementState::Released,
            j: ElementState::Released,
            k: ElementState::Released,
            l: ElementState::Released,
            m: ElementState::Released,
            n: ElementState::Released,
            o: ElementState::Released,
            p: ElementState::Released,
            q: ElementState::Released,
            r: ElementState::Released,
            s: ElementState::Released,
            t: ElementState::Released,
            u: ElementState::Released,
            v: ElementState::Released,
            w: ElementState::Released,
            x: ElementState::Released,
            y: ElementState::Released,
            z: ElementState::Released,
            space: ElementState::Released,
            escape: ElementState::Released,
            enter: ElementState::Released,
            backspace: ElementState::Released,
            comma: ElementState::Released,
            period: ElementState::Released,
            semicolon: ElementState::Released,
            slash: ElementState::Released,
            equal: ElementState::Released,
            left_bracket: ElementState::Released,
            right_bracket: ElementState::Released,
            left_shift: ElementState::Released,
            right_shift: ElementState::Released,
            left_ctrl: ElementState::Released,
            right_ctrl: ElementState::Released,
            left_alt: ElementState::Released,
            right_alt: ElementState::Released,
            left_arrow: ElementState::Released,
            right_arrow: ElementState::Released,
            numrow0: ElementState::Released,
            numrow1: ElementState::Released,
            numrow2: ElementState::Released,
            numrow3: ElementState::Released,
            numrow4: ElementState::Released,
            numrow5: ElementState::Released,
            numrow6: ElementState::Released,
            numrow7: ElementState::Released,
            numrow8: ElementState::Released,
            numrow9: ElementState::Released,
            numpad0: ElementState::Released,
            numpad1: ElementState::Released,
            numpad2: ElementState::Released,
            numpad3: ElementState::Released,
            numpad4: ElementState::Released,
            numpad5: ElementState::Released,
            numpad6: ElementState::Released,
            numpad7: ElementState::Released,
            numpad8: ElementState::Released,
            numpad9: ElementState::Released,
            numpad_decimal: ElementState::Released,
            numpad_divide: ElementState::Released,
            numpad_multiply: ElementState::Released,
            numpad_subtract: ElementState::Released,
            numpad_add: ElementState::Released,
            numpad_enter: ElementState::Released,
            numpad_equal: ElementState::Released,
            apostrophe: ElementState::Released,
            minus: ElementState::Released,
            backslash: ElementState::Released,
            accent_grave: ElementState::Released,
            delete: ElementState::Released,
            up_arrow: ElementState::Released,
            down_arrow: ElementState::Released,
            page_up: ElementState::Released,
            page_down: ElementState::Released,
            f1: ElementState::Released,
            f2: ElementState::Released,
            f3: ElementState::Released,
            f4: ElementState::Released,
            f5: ElementState::Released,
            f6: ElementState::Released,
            f7: ElementState::Released,
            f8: ElementState::Released,
            f9: ElementState::Released,
            f10: ElementState::Released,
            f11: ElementState::Released,
            f12: ElementState::Released,
            f13: ElementState::Released,
            f14: ElementState::Released,
            f15: ElementState::Released,
            f16: ElementState::Released,
            f17: ElementState::Released,
            f18: ElementState::Released,
            f19: ElementState::Released,
            f20: ElementState::Released,
            f21: ElementState::Released,
            f22: ElementState::Released,
            f23: ElementState::Released,
            f24: ElementState::Released,
        }
    }

    pub fn set(&mut self, key: KeyboardKey, state: ElementState)
    {
        match key
        {
            KeyboardKey::A => self.a = state,
            KeyboardKey::B => self.b = state,
            KeyboardKey::C => self.c = state,
            KeyboardKey::D => self.d = state,
            KeyboardKey::E => self.e = state,
            KeyboardKey::F => self.f = state,
            KeyboardKey::G => self.g = state,
            KeyboardKey::H => self.h = state,
            KeyboardKey::I => self.i = state,
            KeyboardKey::J => self.j = state,
            KeyboardKey::K => self.k = state,
            KeyboardKey::L => self.l = state,
            KeyboardKey::M => self.m = state,
            KeyboardKey::N => self.n = state,
            KeyboardKey::O => self.o = state,
            KeyboardKey::P => self.p = state,
            KeyboardKey::Q => self.q = state,
            KeyboardKey::R => self.r = state,
            KeyboardKey::S => self.s = state,
            KeyboardKey::T => self.t = state,
            KeyboardKey::U => self.u = state,
            KeyboardKey::V => self.v = state,
            KeyboardKey::W => self.w = state,
            KeyboardKey::X => self.x = state,
            KeyboardKey::Y => self.y = state,
            KeyboardKey::Z => self.z = state,
            KeyboardKey::Space => self.space = state,
            KeyboardKey::Escape => self.escape = state,
            KeyboardKey::Enter => self.enter = state,
            KeyboardKey::Backspace => self.backspace = state,
            KeyboardKey::Comma => self.comma = state,
            KeyboardKey::Period => self.period = state,
            KeyboardKey::Semicolon => self.semicolon = state,
            KeyboardKey::Slash => self.slash = state,
            KeyboardKey::Equal => self.equal = state,
            KeyboardKey::LeftBracket => self.left_bracket = state,
            KeyboardKey::RightBracket => self.right_bracket = state,
            KeyboardKey::LeftShift => self.left_shift = state,
            KeyboardKey::RightShift => self.right_shift = state,
            KeyboardKey::LeftCtrl => self.left_ctrl = state,
            KeyboardKey::RightCtrl => self.right_ctrl = state,
            KeyboardKey::LeftAlt => self.left_alt = state,
            KeyboardKey::RightAlt => self.right_alt = state,
            KeyboardKey::LeftArrow => self.left_arrow = state,
            KeyboardKey::RightArrow => self.right_arrow = state,
            KeyboardKey::Numrow0 => self.numrow0 = state,
            KeyboardKey::Numrow1 => self.numrow1 = state,
            KeyboardKey::Numrow2 => self.numrow2 = state,
            KeyboardKey::Numrow3 => self.numrow3 = state,
            KeyboardKey::Numrow4 => self.numrow4 = state,
            KeyboardKey::Numrow5 => self.numrow5 = state,
            KeyboardKey::Numrow6 => self.numrow6 = state,
            KeyboardKey::Numrow7 => self.numrow7 = state,
            KeyboardKey::Numrow8 => self.numrow8 = state,
            KeyboardKey::Numrow9 => self.numrow9 = state,
            KeyboardKey::Numpad0 => self.numpad0 = state,
            KeyboardKey::Numpad1 => self.numpad1 = state,
            KeyboardKey::Numpad2 => self.numpad2 = state,
            KeyboardKey::Numpad3 => self.numpad3 = state,
            KeyboardKey::Numpad4 => self.numpad4 = state,
            KeyboardKey::Numpad5 => self.numpad5 = state,
            KeyboardKey::Numpad6 => self.numpad6 = state,
            KeyboardKey::Numpad7 => self.numpad7 = state,
            KeyboardKey::Numpad8 => self.numpad8 = state,
            KeyboardKey::Numpad9 => self.numpad9 = state,
            KeyboardKey::NumpadDecimal => self.numpad_decimal = state,
            KeyboardKey::NumpadDivide => self.numpad_divide = state,
            KeyboardKey::NumpadMultiply => self.numpad_multiply = state,
            KeyboardKey::NumpadSubtract => self.numpad_subtract = state,
            KeyboardKey::NumpadAdd => self.numpad_add = state,
            KeyboardKey::NumpadEnter => self.numpad_enter = state,
            KeyboardKey::NumpadEqual => self.numpad_equal = state,
            KeyboardKey::Apostrophe => self.apostrophe = state,
            KeyboardKey::Minus => self.minus = state,
            KeyboardKey::Backslash => self.backslash = state,
            KeyboardKey::AccentGrave => self.accent_grave = state,
            KeyboardKey::Delete => self.delete = state,
            KeyboardKey::UpArrow => self.up_arrow = state,
            KeyboardKey::DownArrow => self.down_arrow = state,
            KeyboardKey::PageUp => self.page_up = state,
            KeyboardKey::PageDown => self.page_down = state,
            KeyboardKey::F1 => self.f1 = state,
            KeyboardKey::F2 => self.f2 = state,
            KeyboardKey::F3 => self.f3 = state,
            KeyboardKey::F4 => self.f4 = state,
            KeyboardKey::F5 => self.f5 = state,
            KeyboardKey::F6 => self.f6 = state,
            KeyboardKey::F7 => self.f7 = state,
            KeyboardKey::F8 => self.f8 = state,
            KeyboardKey::F9 => self.f9 = state,
            KeyboardKey::F10 => self.f10 = state,
            KeyboardKey::F11 => self.f11 = state,
            KeyboardKey::F12 => self.f12 = state,
            KeyboardKey::F13 => self.f13 = state,
            KeyboardKey::F14 => self.f14 = state,
            KeyboardKey::F15 => self.f15 = state,
            KeyboardKey::F16 => self.f16 = state,
            KeyboardKey::F17 => self.f17 = state,
            KeyboardKey::F18 => self.f18 = state,
            KeyboardKey::F19 => self.f19 = state,
            KeyboardKey::F20 => self.f20 = state,
            KeyboardKey::F21 => self.f21 = state,
            KeyboardKey::F22 => self.f22 = state,
            KeyboardKey::F23 => self.f23 = state,
            KeyboardKey::F24 => self.f24 = state,
        }
    }

    pub fn get(&self, key: KeyboardKey) -> ElementState
    {
        match key
        {
            KeyboardKey::A => self.a,
            KeyboardKey::B => self.b,
            KeyboardKey::C => self.c,
            KeyboardKey::D => self.c,
            KeyboardKey::E => self.e,
            KeyboardKey::F => self.f,
            KeyboardKey::G => self.g,
            KeyboardKey::H => self.h,
            KeyboardKey::I => self.i,
            KeyboardKey::J => self.j,
            KeyboardKey::K => self.k,
            KeyboardKey::L => self.l,
            KeyboardKey::M => self.m,
            KeyboardKey::N => self.n,
            KeyboardKey::O => self.o,
            KeyboardKey::P => self.p,
            KeyboardKey::Q => self.q,
            KeyboardKey::R => self.r,
            KeyboardKey::S => self.s,
            KeyboardKey::T => self.t,
            KeyboardKey::U => self.u,
            KeyboardKey::V => self.v,
            KeyboardKey::W => self.w,
            KeyboardKey::X => self.x,
            KeyboardKey::Y => self.y,
            KeyboardKey::Z => self.z,
            KeyboardKey::Space => self.space,
            KeyboardKey::Escape => self.escape,
            KeyboardKey::Enter => self.enter,
            KeyboardKey::Backspace => self.backspace,
            KeyboardKey::Comma => self.comma,
            KeyboardKey::Period => self.period,
            KeyboardKey::Semicolon => self.semicolon,
            KeyboardKey::Slash => self.slash,
            KeyboardKey::Equal => self.equal,
            KeyboardKey::LeftBracket => self.left_bracket,
            KeyboardKey::RightBracket => self.right_bracket,
            KeyboardKey::LeftShift => self.left_shift,
            KeyboardKey::RightShift => self.right_shift,
            KeyboardKey::LeftCtrl => self.left_ctrl,
            KeyboardKey::RightCtrl => self.right_ctrl,
            KeyboardKey::LeftAlt => self.left_alt,
            KeyboardKey::RightAlt => self.right_alt,
            KeyboardKey::LeftArrow => self.left_arrow,
            KeyboardKey::RightArrow => self.right_arrow,
            KeyboardKey::Numrow0 => self.numrow0,
            KeyboardKey::Numrow1 => self.numrow1,
            KeyboardKey::Numrow2 => self.numrow2,
            KeyboardKey::Numrow3 => self.numrow3,
            KeyboardKey::Numrow4 => self.numrow4,
            KeyboardKey::Numrow5 => self.numrow5,
            KeyboardKey::Numrow6 => self.numrow6,
            KeyboardKey::Numrow7 => self.numrow7,
            KeyboardKey::Numrow8 => self.numrow8,
            KeyboardKey::Numrow9 => self.numrow9,
            KeyboardKey::Numpad0 => self.numpad0,
            KeyboardKey::Numpad1 => self.numpad1,
            KeyboardKey::Numpad2 => self.numpad2,
            KeyboardKey::Numpad3 => self.numpad3,
            KeyboardKey::Numpad4 => self.numpad4,
            KeyboardKey::Numpad5 => self.numpad5,
            KeyboardKey::Numpad6 => self.numpad6,
            KeyboardKey::Numpad7 => self.numpad7,
            KeyboardKey::Numpad8 => self.numpad8,
            KeyboardKey::Numpad9 => self.numpad9,
            KeyboardKey::NumpadDecimal => self.numpad_decimal,
            KeyboardKey::NumpadDivide => self.numpad_divide,
            KeyboardKey::NumpadMultiply => self.numpad_multiply,
            KeyboardKey::NumpadSubtract => self.numpad_subtract,
            KeyboardKey::NumpadAdd => self.numpad_add,
            KeyboardKey::NumpadEnter => self.numpad_enter,
            KeyboardKey::NumpadEqual => self.numpad_equal,
            KeyboardKey::Apostrophe => self.apostrophe,
            KeyboardKey::Minus => self.minus,
            KeyboardKey::Backslash => self.backslash,
            KeyboardKey::AccentGrave => self.accent_grave,
            KeyboardKey::Delete => self.delete,
            KeyboardKey::UpArrow => self.up_arrow,
            KeyboardKey::DownArrow => self.down_arrow,
            KeyboardKey::PageUp => self.page_up,
            KeyboardKey::PageDown => self.page_down,
            KeyboardKey::F1 => self.f1,
            KeyboardKey::F2 => self.f2,
            KeyboardKey::F3 => self.f3,
            KeyboardKey::F4 => self.f4,
            KeyboardKey::F5 => self.f5,
            KeyboardKey::F6 => self.f6,
            KeyboardKey::F7 => self.f7,
            KeyboardKey::F8 => self.f8,
            KeyboardKey::F9 => self.f9,
            KeyboardKey::F10 => self.f10,
            KeyboardKey::F11 => self.f11,
            KeyboardKey::F12 => self.f12,
            KeyboardKey::F13 => self.f13,
            KeyboardKey::F14 => self.f14,
            KeyboardKey::F15 => self.f15,
            KeyboardKey::F16 => self.f16,
            KeyboardKey::F17 => self.f17,
            KeyboardKey::F18 => self.f18,
            KeyboardKey::F19 => self.f19,
            KeyboardKey::F20 => self.f20,
            KeyboardKey::F21 => self.f21,
            KeyboardKey::F22 => self.f22,
            KeyboardKey::F23 => self.f23,
            KeyboardKey::F24 => self.f24,
        }
    }

    pub fn get_mods(&self) -> ModifierState
    {
        ModifierState
        {
            shift: self.left_shift == ElementState::Pressed || self.right_shift == ElementState::Pressed,
            ctrl: self.left_ctrl == ElementState::Pressed || self.right_ctrl == ElementState::Pressed,
            alt: self.left_alt == ElementState::Pressed || self.right_alt == ElementState::Pressed,
        }
    }
}
