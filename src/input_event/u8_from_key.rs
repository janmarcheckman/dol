use super::prelude::*;

impl KeyboardKey
{
    pub fn to_u8(self, upper: bool) -> Option<u8>
    {
        if upper
        {
            self.to_u8_upper()
        }
        else
        {
            self.to_u8_lower()
        }
    }
    
    fn to_u8_lower(self) -> Option<u8>
    {
        match self
        {
            KeyboardKey::Space => Some(b' '),
            KeyboardKey::Apostrophe => Some(b'\''),
            KeyboardKey::Comma => Some(b','),
            KeyboardKey::Minus => Some(b'-'),
            KeyboardKey::Period => Some(b'.'),
            KeyboardKey::Slash => Some(b'/'),
            KeyboardKey::Numrow0 => Some(b'0'),
            KeyboardKey::Numrow1 => Some(b'1'),
            KeyboardKey::Numrow2 => Some(b'2'),
            KeyboardKey::Numrow3 => Some(b'3'),
            KeyboardKey::Numrow4 => Some(b'4'),
            KeyboardKey::Numrow5 => Some(b'5'),
            KeyboardKey::Numrow6 => Some(b'6'),
            KeyboardKey::Numrow7 => Some(b'7'),
            KeyboardKey::Numrow8 => Some(b'8'),
            KeyboardKey::Numrow9 => Some(b'9'),
            KeyboardKey::Semicolon => Some(b';'),
            KeyboardKey::Equal => Some(b'='),
            KeyboardKey::A => Some(b'a'),
            KeyboardKey::B => Some(b'b'),
            KeyboardKey::C => Some(b'c'),
            KeyboardKey::D => Some(b'd'),
            KeyboardKey::E => Some(b'e'),
            KeyboardKey::F => Some(b'f'),
            KeyboardKey::G => Some(b'g'),
            KeyboardKey::H => Some(b'h'),
            KeyboardKey::I => Some(b'i'),
            KeyboardKey::J => Some(b'j'),
            KeyboardKey::K => Some(b'k'),
            KeyboardKey::L => Some(b'l'),
            KeyboardKey::M => Some(b'm'),
            KeyboardKey::N => Some(b'n'),
            KeyboardKey::O => Some(b'o'),
            KeyboardKey::P => Some(b'p'),
            KeyboardKey::Q => Some(b'q'),
            KeyboardKey::R => Some(b'r'),
            KeyboardKey::S => Some(b's'),
            KeyboardKey::T => Some(b't'),
            KeyboardKey::U => Some(b'u'),
            KeyboardKey::V => Some(b'v'),
            KeyboardKey::W => Some(b'w'),
            KeyboardKey::X => Some(b'x'),
            KeyboardKey::Y => Some(b'y'),
            KeyboardKey::Z => Some(b'z'),
            KeyboardKey::LeftBracket => Some(b'['),
            KeyboardKey::Backslash => Some(b'\\'),
            KeyboardKey::RightBracket => Some(b']'),
            KeyboardKey::AccentGrave => Some(b'`'),
            KeyboardKey::Numpad0 => Some(b'0'),
            KeyboardKey::Numpad1 => Some(b'1'),
            KeyboardKey::Numpad2 => Some(b'2'),
            KeyboardKey::Numpad3 => Some(b'3'),
            KeyboardKey::Numpad4 => Some(b'4'),
            KeyboardKey::Numpad5 => Some(b'5'),
            KeyboardKey::Numpad6 => Some(b'6'),
            KeyboardKey::Numpad7 => Some(b'7'),
            KeyboardKey::Numpad8 => Some(b'8'),
            KeyboardKey::Numpad9 => Some(b'9'),
            KeyboardKey::NumpadDecimal => Some(b'.'),
            KeyboardKey::NumpadDivide => Some(b'/'),
            KeyboardKey::NumpadMultiply => Some(b'*'),
            KeyboardKey::NumpadSubtract => Some(b'-'),
            KeyboardKey::NumpadAdd => Some(b'+'),
            KeyboardKey::NumpadEqual => Some(b'='),
            _ => None,
        }
    }
    
    fn to_u8_upper(self) -> Option<u8>
    {
        match self
        {
            KeyboardKey::Space => Some(b' '),
            KeyboardKey::Apostrophe => Some(b'"'),
            KeyboardKey::Comma => Some(b'<'),
            KeyboardKey::Minus => Some(b'_'),
            KeyboardKey::Period => Some(b'>'),
            KeyboardKey::Slash => Some(b'?'),
            KeyboardKey::Numrow0 => Some(b')'),
            KeyboardKey::Numrow1 => Some(b'!'),
            KeyboardKey::Numrow2 => Some(b'@'),
            KeyboardKey::Numrow3 => Some(b'#'),
            KeyboardKey::Numrow4 => Some(b'$'),
            KeyboardKey::Numrow5 => Some(b'%'),
            KeyboardKey::Numrow6 => Some(b'^'),
            KeyboardKey::Numrow7 => Some(b'&'),
            KeyboardKey::Numrow8 => Some(b'*'),
            KeyboardKey::Numrow9 => Some(b'('),
            KeyboardKey::Semicolon => Some(b':'),
            KeyboardKey::Equal => Some(b'+'),
            KeyboardKey::A => Some(b'A'),
            KeyboardKey::B => Some(b'B'),
            KeyboardKey::C => Some(b'C'),
            KeyboardKey::D => Some(b'D'),
            KeyboardKey::E => Some(b'E'),
            KeyboardKey::F => Some(b'F'),
            KeyboardKey::G => Some(b'G'),
            KeyboardKey::H => Some(b'H'),
            KeyboardKey::I => Some(b'I'),
            KeyboardKey::J => Some(b'J'),
            KeyboardKey::K => Some(b'K'),
            KeyboardKey::L => Some(b'L'),
            KeyboardKey::M => Some(b'M'),
            KeyboardKey::N => Some(b'N'),
            KeyboardKey::O => Some(b'O'),
            KeyboardKey::P => Some(b'P'),
            KeyboardKey::Q => Some(b'Q'),
            KeyboardKey::R => Some(b'R'),
            KeyboardKey::S => Some(b'S'),
            KeyboardKey::T => Some(b'T'),
            KeyboardKey::U => Some(b'U'),
            KeyboardKey::V => Some(b'V'),
            KeyboardKey::W => Some(b'W'),
            KeyboardKey::X => Some(b'X'),
            KeyboardKey::Y => Some(b'Y'),
            KeyboardKey::Z => Some(b'Z'),
            KeyboardKey::LeftBracket => Some(b'{'),
            KeyboardKey::Backslash => Some(b'|'),
            KeyboardKey::RightBracket => Some(b'}'),
            KeyboardKey::AccentGrave => Some(b'~'),
            KeyboardKey::Numpad0 => Some(b'0'),
            KeyboardKey::Numpad1 => Some(b'1'),
            KeyboardKey::Numpad2 => Some(b'2'),
            KeyboardKey::Numpad3 => Some(b'3'),
            KeyboardKey::Numpad4 => Some(b'4'),
            KeyboardKey::Numpad5 => Some(b'5'),
            KeyboardKey::Numpad6 => Some(b'6'),
            KeyboardKey::Numpad7 => Some(b'7'),
            KeyboardKey::Numpad8 => Some(b'8'),
            KeyboardKey::Numpad9 => Some(b'9'),
            KeyboardKey::NumpadDecimal => Some(b'.'),
            KeyboardKey::NumpadDivide => Some(b'/'),
            KeyboardKey::NumpadMultiply => Some(b'*'),
            KeyboardKey::NumpadSubtract => Some(b'-'),
            KeyboardKey::NumpadAdd => Some(b'+'),
            KeyboardKey::NumpadEqual => Some(b'='),
            _ => None,
        }
    }    
}
